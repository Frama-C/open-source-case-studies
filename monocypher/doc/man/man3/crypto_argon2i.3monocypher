.Dd December 28, 2017
.Dt CRYPTO_ARGON2I 3MONOCYPHER
.Os
.Sh NAME
.Nm crypto_argon2i
.Nd password key derivation
.Sh SYNOPSIS
.In monocypher.h
.Ft void
.Fo crypto_argon2i
.Fa "uint8_t *hash"
.Fa "uint32_t hash_size"
.Fa "void *work_area"
.Fa "uint32_t nb_blocks"
.Fa "uint32_t nb_iterations"
.Fa "const uint8_t *password"
.Fa "uint32_t password_size"
.Fa "const uint8_t *salt"
.Fa "uint32_t salt_size"
.Fc
.Ft void
.Fo crypto_argon2i_general
.Fa "uint8_t *hash"
.Fa "uint32_t hash_size"
.Fa "void *work_area"
.Fa "uint32_t nb_blocks"
.Fa "uint32_t nb_iterations"
.Fa "const uint8_t *password"
.Fa "uint32_t password_size"
.Fa "const uint8_t *salt"
.Fa "uint32_t salt_size"
.Fa "const uint8_t *key"
.Fa "uint32_t key_size"
.Fa "const uint8_t *ad"
.Fa "uint32_t ad_size"
.Fc
.Sh DESCRIPTION
Argon2i is a resource intensive password key derivation scheme
optimised for the typical x86-like processor.
It runs in constant time with respect to the contents of the password.
.Pp
Typical applications are password checking (for online services), and
key derivation (for encryption).
Derived keys can be used to encrypt private keys or password databases.
.Pp
The version provided by Monocypher has no threading support, so the
degree of parallelism is limited to 1.
This is considered good enough for most purposes.
.Pp
The arguments to
.Fn crypto_argon2i
are:
.Bl -tag -width Ds
.It Fa hash
The output hash.
.It Fa hash_size
Length of
.Fa hash ,
in bytes.
This argument should be set to 32 or 64 for compatibility with the
.Fn crypto_verify*
constant time comparison functions.
.It Fa work_area
Temporary buffer for the algorithm.
Must be
.Fa nb_blocks
Ã— 1024 bytes big, and suitably aligned for 64-bit integers.
.Fn malloc
will yield a suitable chunk of memory.
.Pp
The work area is automatically wiped by
.Fn crypto_argon2i .
.It Fa nb_blocks
The number of blocks for the work area.
Must be at least 8.
A value of 100000 (one hundred megabytes) is a good starting point.
If the computation takes too long, reduce this number.
If it is too fast, increase this number.
If it is still too fast with all available memory, increase
.Fa nb_iterations .
.It Fa nb_iterations
The number of iterations.
It must be at least 1.
A value of 3 is recommended.
.It Fa password
The password to hash.
It should be wiped with
.Xr crypto_wipe 3monocypher
after being hashed.
.It Fa password_size
Length of
.Fa password ,
in bytes.
.It Fa salt
A password salt.
This should be filled with random bytes, generated separately for each
password to be hashed.
See
.Xr intro 3monocypher
for advice about generating random bytes (use the operating system's
random number generator).
.It Fa salt_size
Length of
.Fa salt ,
in bytes.
Must be at least 8.
16 is recommended.
.El
.Pp
The output hash must not overlap with the work area, or it will be
wiped along with it.
Any other overlap is permitted.
.Pp
Use
.Xr crypto_verify16 3monocypher ,
.Xr crypto_verify32 3monocypher
or
.Xr crypto_verify64 3monocypher
to compare password hashes to prevent timing attacks.
.Pp
To select the
.Fa nb_blocks
and
.Fa nb_iterations
parameters, it should first be decided how long the computation should
take.
For user authentication, we recommend somewhere between half a second
(convenient) and several seconds (paranoid).
The computation should use as much memory as can be spared.
.Pp
Since parameter selection depends on your hardware, some trial and error
will be required in order to determine the ideal settings.
Three iterations and 100000 blocks (that is, one hundred megabytes of
memory) is a good starting point.
Adjust
.Fa nb_blocks
first.
If using all available memory is not slow enough, increase
.Fa nb_iterations .
.Pp
.Fn crypto_argon2i_general
is a variant of
.Fn crypto_argon2i
that supports keyed hashing and hashing of additional data.
The additional arguments are:
.Bl -tag -width Ds
.It Fa key
A key to use in the hash.
Can be
.Dv NULL
if
.Fa key_size
is zero.
The key is generally not needed, but it does have some uses.
In the context of password derivation, it would be stored separately
from the password database, and would remain secret even if an
attacker were to steal the database.
Note that changing the key requires rehashing the user's password,
which is only possible upon user login.
.It Fa key_size
Length of
.Fa key ,
in bytes.
Must be zero if there is no key.
.It Fa ad
Additional data.
This is additional data that goes into the hash, similar to the
authenticated encryption with authenticated data (AEAD) construction in
.Xr crypto_lock_aead 3monocypher .
This most likely has no practical application but is exposed for the
sake of completeness.
This parameter may be
.Dv NULL
if
.Fa ad_size
is zero.
.It Fa ad_size
Length of
.Fa ad ,
in bytes.
Must be zero if there is no additional data.
.El
.Sh RETURN VALUES
These functions return nothing.
.Sh EXAMPLES
This example shows how to hash a password with the recommended baseline
parameters:
.Bd -literal -offset indent
uint8_t        hash[32];                    /* Output hash     */
const uint8_t *password;                    /* User's password */
uint8_t        password_size;               /* Password length */
const uint8_t  salt[16];                    /* Random salt     */
const uint32_t nb_blocks = 100000;          /* 100 megabytes   */
const uint32_t nb_iterations = 3;           /* 3 iterations    */
void *work_area = malloc(nb_blocks * 1024); /* Work area       */
if (work_area == NULL) {
    /* Handle malloc() failure */
}
crypto_argon2i(hash, 32,
               work_area, nb_blocks, nb_iterations,
               password, password_size,
               salt, 16);
/* Wipe secrets if they are no longer needed */
crypto_wipe(password, password_size);
free(work_area);
.Ed
.Sh SEE ALSO
.Xr crypto_lock 3monocypher ,
.Xr crypto_verify16 3monocypher ,
.Xr crypto_wipe 3monocypher ,
.Xr intro 3monocypher
.Sh STANDARDS
These functions implement Argon2i.
An RFC draft is being maintained.
.Sh CAVEATS
Any deviation from the specified input and output length ranges results
in
.Sy undefined behaviour .
Make sure your inputs are correct.
