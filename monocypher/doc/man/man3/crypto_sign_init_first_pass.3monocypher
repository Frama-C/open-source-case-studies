.Dd December 28, 2017
.Dt CRYPTO_SIGN_INIT_FIRST_PASS 3MONOCYPHER
.Os
.Sh NAME
.Nm crypto_sign_init_first_pass ,
.Nm crypto_sign_update ,
.Nm crypto_sign_final ,
.Nm crypto_sign_init_second_pass ,
.Nm crypto_check_init ,
.Nm crypto_check_update ,
.Nm crypto_check_final
.Nd incremental public key signatures
.Sh SYNOPSIS
.In monocypher.h
.Ft void
.Fo crypto_sign_init_first_pass
.Fa "crypto_sign_ctx *ctx"
.Fa "const uint8_t secret_key[32]"
.Fa "const uint8_t public_key[32]"
.Fc
.Ft void
.Fo crypto_sign_update
.Fa "crypto_sign_ctx *ctx"
.Fa "const uint8_t *message"
.Fa "size_t message_size"
.Fc
.Ft void
.Fo crypto_sign_final
.Fa "crypto_sign_ctx *ctx"
.Fa "uint8_t signature[64]"
.Fc
.Ft void
.Fo crypto_sign_init_second_pass
.Fa "crypto_sign_ctx *ctx"
.Fc
.Ft void
.Fo crypto_check_init
.Fa "crypto_check_ctx *ctx"
.Fa "const uint8_t signature[64]"
.Fa "const uint8_t public_key[32]"
.Fc
.Ft void
.Fo crypto_check_update
.Fa "crypto_check_ctx *ctx"
.Fa "const uint8_t *message"
.Fa "size_t message_size"
.Fc
.Ft int
.Fo crypto_check_final
.Fa "crypto_check_ctx *ctx"
.Fc
.Sh DESCRIPTION
These functions are variants of
.Xr crypto_sign 3monocypher
and
.Xr crypto_check 3monocypher .
Prefer those simpler functions if possible.
.Pp
The arguments are the same as those described in
.Xr crypto_sign 3monocypher .
.Pp
This incremental interface can be used to sign or verify messages too
large to fit in a single buffer.
The arguments are the same as the direct interface described in
.Xr crypto_sign 3monocypher .
.Pp
The direct and incremental interface produce and accept the same
signatures.
.Pp
Signing is done in two passes.
This requires five steps:
.Bl -bullet
.It
Initialisation of the first pass with
.Fn crypto_sign_init_first_pass .
The public key is optional, and will be recomputed if not provided.
This recomputation doubles the execution time for short messages.
.It
The first pass proper, with
.Fn crypto_sign_update .
.It
Initialisation of the second pass with
.Fn crypto_sign_init_second_pass .
.It
The second pass proper, with
.Fn crypto_sign_update .
The same update function is used for both passes.
.It
Signature generation with
.Fn crypto_sign_final .
This also wipes the context.
.El
.Pp
Verification requires three steps:
.Bl -bullet
.It
Initialisation with
.Fn crypto_check_init .
.It
Update with
.Fn crypto_check_update .
.It
Signature verification with
.Fn crypto_check_final .
.El
.Sh RETURN VALUES
.Fn crypto_sign_init_first_pass ,
.Fn crypto_sign_init_second_pass ,
.Fn crypto_sign_update ,
.Fn crypto_sign_final ,
.Fn crypto_check_init
and
.Fn crypto_check_update
return nothing.
.Pp
.Fn crypto_check_final
returns 0 for legitimate messages and -1 for forgeries.
.Sh EXAMPLES
Sign a message:
.Bd -literal -offset indent
const uint8_t sk       [ 32]; /* Secret key            */
const uint8_t pk       [ 32]; /* Public key (optional) */
const uint8_t message  [500]; /* Message to sign       */
uint8_t       signature[ 64]; /* Output signature      */
crypto_sign_ctx ctx;
crypto_sign_init_first_pass(&ctx, sk, pk);
/* Wipe the secret key if no longer needed */
crypto_wipe(sk, 32);
for (size_t i = 0; i < 500; i += 100) {
    crypto_sign_update(&ctx, message + i, 100);
}
crypto_sign_init_second_pass(&ctx);
for (size_t i = 0; i < 500; i += 100) {
    crypto_sign_update(&ctx, message + i, 100);
}
crypto_sign_final(&ctx, signature);
.Ed
.Pp
Check the above:
.Bd -literal -offset indent
const uint8_t pk       [ 32]; /* Public key         */
const uint8_t message  [500]; /* Message to sign    */
const uint8_t signature[ 64]; /* Signature to check */
crypto_check_ctx ctx;
crypto_check_init(&ctx, signature, pk);
for (size_t i = 0; i < 500; i += 100) {
    crypto_check_update(&ctx, message + i, 100);
}
if (crypto_check_final(&ctx)) {
    /* Message is corrupted, abort processing */
} else {
    /* Message is genuine */
}

.Ed
.Sh SEE ALSO
.Xr crypto_blake2b 3monocypher ,
.Xr crypto_key_exchange 3monocypher ,
.Xr crypto_lock 3monocypher ,
.Xr crypto_sign 3monocypher ,
.Xr crypto_wipe 3monocypher ,
.Xr intro 3monocypher
.Sh STANDARDS
These functions implement EdDSA with Curve25519 and Blake2b.
This is the same as Ed25519, with Blake2b instead of SHA-512.
Ed25519 is described in RFC 7748.
.Sh SECURITY CONSIDERATIONS
Messages are not verified until the call to
.Fn crypto_check_final .
Messages may be stored before they are verified, but they cannot be
.Em trusted .
Processing untrusted messages increases the attack surface of the
system.
Doing so securely is hard.
Do not process messages before calling
.Fn crypto_check_final .
.Pp
When signing messages, the security considerations documented in
.Xr crypto_sign 3monocypher
also apply.
.Sh IMPLEMENTATION DETAILS
EdDSA signatures require two passes that cannot be performed in
parallel.
There are ways around this limitation, but they all lower security in
some way.
For this reason, Monocypher does not support them.
