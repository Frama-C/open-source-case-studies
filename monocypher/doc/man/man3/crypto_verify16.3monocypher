.Dd December 28, 2017
.Dt CRYPTO_VERIFY16 3MONOCYPHER
.Os
.Sh NAME
.Nm crypto_verify16 ,
.Nm crypto_verify32 ,
.Nm crypto_verify64
.Nd timing-safe data comparison
.Sh SYNOPSIS
.In monocypher.h
.Ft int
.Fo crypto_verify16
.Fa "const uint8_t a[16]"
.Fa "const uint8_t b[16]"
.Fc
.Ft int
.Fo crypto_verify32
.Fa "const uint8_t a[32]"
.Fa "const uint8_t b[32]"
.Fc
.Ft int
.Fo crypto_verify64
.Fa "const uint8_t a[64]"
.Fa "const uint8_t b[64]"
.Fc
.Sh DESCRIPTION
Cryptographic operations often require comparison of secrets or values
derived from secrets.
Standard comparison functions like
.Fn memcmp
tend to exit when they find the first difference, leaking information
through timing differences.
.Pp
As an example, say a message authentication code (MAC) is sent over the
network along with a message, but the correct MAC is secret.
If the attacker attempts a forgery, one does not want to reveal
.Dq your MAC is wrong, Em and it took 384 microseconds to tell .
If the next attempt takes 462 microseconds instead, it tells the
attacker they just guessed a few bytes correctly.
That way, an attacker can derive the correct MAC, and successfully
forge a message.
This has lead to practical attacks in the past.
.Pp
To avoid such catastrophic failure,
.Fn crypto_verify16 ,
.Fn crypto_verify32
and
.Fn crypto_verify64
provide comparison functions whose timing is independent from
the content of their input.
They compare the first
16, 32, or 64 bytes of the two byte arrays
.Fa a
and
.Fa b .
.Pp
When in doubt, prefer these over
.Fn memcmp .
.Sh RETURN VALUES
These functions return 0 if the two memory chunks are the same, -1
otherwise.
.Sh SEE ALSO
.Xr intro 3monocypher
