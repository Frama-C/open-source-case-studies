.Dd July 17, 2018
.Dt CRYPTO_KEY_EXCHANGE 3MONOCYPHER
.Os
.Sh NAME
.Nm crypto_key_exchange ,
.Nm crypto_key_exchange_public_key
.Nd Elliptic Curve Diffie-Hellman key exchange
.Sh SYNOPSIS
.In monocypher.h
.Ft int
.Fo crypto_key_exchange
.Fa "uint8_t shared_key[32]"
.Fa "const uint8_t your_secret_key[32]"
.Fa "const uint8_t their_public_key[32]"
.Fc
.Ft void
.Fo crypto_key_exchange_public_key
.Fa "uint8_t your_public_key[32]"
.Fa "const uint8_t your_secret_key[32]"
.Fc
.Sh DESCRIPTION
.Fn crypto_key_exchange
computes a shared key with your secret key and their public key.
.Pp
.Fn crypto_key_exchange_public_key
deterministically computes the public key from a random secret key.
.Pp
The arguments are:
.Bl -tag -width Ds
.It Fa shared_key
The shared secret, known only to those who know a relevant secret key
(yours or theirs).
It is cryptographically random, and suitable for use with the
.Xr crypto_lock 3monocypher
family of functions.
.It Fa your_secret_key
A 32-byte random number, known only to you.
See
.Xr intro 3monocypher
for advice about generating random bytes (use the operating system's
random number generator).
Do not use the same private key for both key exchanges and signatures.
The public keys are different, and revealing both may leak information.
.It Fa their_public_key
The public key of the other party.
.It Fa your_public_key
Your public key, generated from
.Fa your_secret_key
with
.Fn crypto_key_exchange_public_key .
.El
.Sh RETURN VALUES
Some public keys force the shared key to a known constant.
.Fn crypto_key_exchange
returns -1 if it detects such a public key, otherwise it returns 0.
This never happens with legitimate public keys.
.Pp
.Sy The return value has been deprecated .
.Fn crypto_key_exchange
will return
.Vt void
starting with the next major release of Monocypher.
Some poorly designed protocols require to test for
.Dq contributory
behaviour, which ensures that no untrusted party forces the shared
secret to a known constant.
Protocols should instead be designed in such a way that no such check
is necessary, namely by authenticating the other party or exchanging
keys over a trusted channel.
.Pp
.Fn crypto_key_exchange_public_key
returns nothing.
.Sh EXAMPLES
Generate a public key from a randomly generated secret key:
.Bd -literal -offset indent
const uint8_t sk[32]; /* Random secret key */
uint8_t       pk[32]; /* Public key        */
crypto_key_exchange_public_key(pk, sk);
/* Wipe secrets if they are no longer needed */
crypto_wipe(sk, 32);
.Ed
.Pp
Generate a shared, symmetric key with your secret key and their public
key.
(The other party will generate the same shared key with your public
key and their secret key.)
.Bd -literal -offset indent
const uint8_t their_pk  [32]; /* Their public key   */
const uint8_t your_sk   [32]; /* Your secret key    */
uint8_t       shared_key[32]; /* Shared session key */
crypto_key_exchange(shared_key, your_sk, their_pk);
/* Wipe secrets if they are no longer needed */
crypto_wipe(your_sk, 32);
.Ed
.Sh SEE ALSO
.Xr crypto_lock 3monocypher ,
.Xr intro 3monocypher
.Sh STANDARDS
These functions implement X25519, described in RFC 7748.
.Fn crypto_key_exchange
uses HChacha20 as well.
.Sh SECURITY CONSIDERATIONS
If either of the long term secret keys leaks, it may compromise
.Em all past messages .
This can be avoided by using protocols that provide forward secrecy,
such as the X3DH key agreement protocol.
.Sh IMPLEMENTATION DETAILS
.Fn crypto_key_exchange_public_key
is an alias to
.Xr crypto_x25519_public_key 3monocypher .
